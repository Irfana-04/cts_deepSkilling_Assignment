
CREATE TABLE savings_accounts (
    account_id NUMBER PRIMARY KEY,
    balance NUMBER
);

CREATE TABLE employees (
    emp_id NUMBER PRIMARY KEY,
    name VARCHAR2(50),
    salary NUMBER,
    department_id NUMBER
);

CREATE TABLE accounts (
    account_id NUMBER PRIMARY KEY,
    balance NUMBER
);


INSERT INTO savings_accounts VALUES (1, 1000);
INSERT INTO savings_accounts VALUES (2, 2000);

INSERT INTO employees VALUES (1, 'Alice', 50000, 10);
INSERT INTO employees VALUES (2, 'Bob', 60000, 10);
INSERT INTO employees VALUES (3, 'Charlie', 70000, 20);

INSERT INTO accounts VALUES (101, 5000);
INSERT INTO accounts VALUES (102, 3000);

COMMIT;

CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest AS
BEGIN
    UPDATE savings_accounts
    SET balance = balance + (balance * 0.01);
    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus (
    dept_id IN NUMBER,
    bonus_percent IN NUMBER
) AS
BEGIN
    UPDATE employees
    SET salary = salary + (salary * bonus_percent / 100)
    WHERE department_id = dept_id;
    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE TransferFunds (
    from_account_id IN NUMBER,
    to_account_id IN NUMBER,
    amount IN NUMBER
) AS
    insufficient_balance EXCEPTION;
    current_balance NUMBER;
BEGIN
    SELECT balance INTO current_balance
    FROM accounts
    WHERE account_id = from_account_id;

    IF current_balance < amount THEN
        RAISE insufficient_balance;
    END IF;

    UPDATE accounts
    SET balance = balance - amount
    WHERE account_id = from_account_id;

    UPDATE accounts
    SET balance = balance + amount
    WHERE account_id = to_account_id;

    COMMIT;
EXCEPTION
    WHEN insufficient_balance THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient balance in source account.');
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Before Interest Update ---');
    FOR r IN (SELECT * FROM savings_accounts) LOOP
        DBMS_OUTPUT.PUT_LINE('Account ' || r.account_id || ': ' || r.balance);
    END LOOP;

    ProcessMonthlyInterest;

    DBMS_OUTPUT.PUT_LINE('--- After Interest Update ---');
    FOR r IN (SELECT * FROM savings_accounts) LOOP
        DBMS_OUTPUT.PUT_LINE('Account ' || r.account_id || ': ' || r.balance);
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('--- Before Bonus Update ---');
    FOR r IN (SELECT * FROM employees WHERE department_id = 10) LOOP
        DBMS_OUTPUT.PUT_LINE(r.name || ': ' || r.salary);
    END LOOP;

    UpdateEmployeeBonus(10, 10); 

    DBMS_OUTPUT.PUT_LINE('--- After Bonus Update ---');
    FOR r IN (SELECT * FROM employees WHERE department_id = 10) LOOP
        DBMS_OUTPUT.PUT_LINE(r.name || ': ' || r.salary);
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('--- Before Fund Transfer ---');
    FOR r IN (SELECT * FROM accounts) LOOP
        DBMS_OUTPUT.PUT_LINE('Account ' || r.account_id || ': ' || r.balance);
    END LOOP;

    TransferFunds(101, 102, 1000);

    DBMS_OUTPUT.PUT_LINE('--- After Fund Transfer ---');
    FOR r IN (SELECT * FROM accounts) LOOP
        DBMS_OUTPUT.PUT_LINE('Account ' || r.account_id || ': ' || r.balance);
    END LOOP;
END;
/
